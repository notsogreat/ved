// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  progress  Progress[]
  submissions UserSubmission[]

  @@map("users")
}

model Topic {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  category      String
  difficulty    Difficulty
  prerequisites String[]
  subtopics     Subtopic[]
  progress      Progress[]
  questions     Question[]

  @@map("topics")
}

model Subtopic {
  id            String    @id @default(uuid()) @db.Uuid
  topicId       String    @map("topic_id") @db.Uuid
  name          String
  difficulty    Difficulty
  prerequisites String[]
  topic         Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  progress      Progress[]
  questions     Question[]

  @@map("subtopics")
}

model Progress {
  id                String    @id @default(uuid()) @db.Uuid
  userId           String    @map("user_id") @db.Uuid
  topicId          String    @map("topic_id") @db.Uuid
  subtopicId       String?   @map("subtopic_id") @db.Uuid
  status           Status
  progressPercentage Int      @map("progress_percentage")
  completedAt      DateTime?  @map("completed_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @map("updated_at")
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic            Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  subtopic         Subtopic? @relation(fields: [subtopicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId, subtopicId])
  @@map("user_progress")
}

model Question {
  id          String    @id @default(uuid()) @db.Uuid
  topicId     String    @map("topic_id") @db.Uuid
  subtopicId  String?   @map("subtopic_id") @db.Uuid
  title       String
  description String
  difficulty  Difficulty
  constraints String[]
  createdAt   DateTime  @default(now()) @map("created_at")
  topic       Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  subtopic    Subtopic? @relation(fields: [subtopicId], references: [id], onDelete: Cascade)
  examples    QuestionExample[]
  testCases   TestCase[]
  submissions UserSubmission[]

  @@map("questions")
}

model QuestionExample {
  id          String   @id @default(uuid()) @db.Uuid
  questionId  String   @map("question_id") @db.Uuid
  input       String
  output      String
  explanation String?
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_examples")
}

model TestCase {
  id             String   @id @default(uuid()) @db.Uuid
  questionId     String   @map("question_id") @db.Uuid
  input          String
  expectedOutput String   @map("expected_output")
  isHidden       Boolean  @default(false) @map("is_hidden")
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("test_cases")
}

model UserSubmission {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  questionId    String   @map("question_id") @db.Uuid
  code          String
  language      String
  status        SubmissionStatus
  executionTime Float?   @map("execution_time")
  memoryUsage   Float?   @map("memory_usage")
  createdAt     DateTime @default(now()) @map("created_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("user_submissions")
}

enum Difficulty {
  easy
  medium
  hard
}

enum Status {
  not_started @map("not-started")
  in_progress @map("in-progress")
  complete
}

enum SubmissionStatus {
  pending
  running
  completed
  error
}