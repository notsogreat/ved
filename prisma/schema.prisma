// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(uuid()) @db.Uuid
  name         String
  email        String           @unique
  password     String
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @default(now()) @map("updated_at")
  progress     Progress[]
  submissions  UserSubmission[]
  chatSessions ChatSession[]

  @@map("users")
}

model Topic {
  id                String     @id @db.Text
  name              String
  category          String
  difficulty        Difficulty
  prerequisites     String[]
  description       String?
  parentId          String?    @map("parentId") @db.Text
  parent            Topic?     @relation("TopicToTopic", fields: [parentId], references: [id], onDelete: SetNull)
  children          Topic[]    @relation("TopicToTopic")
  progress          Progress[]
  questions         Question[]
  currentInProgress Progress[] @relation("CurrentSubtopic")

  @@map("topics")
}

model Progress {
  id                 String    @id @default(uuid()) @db.Uuid
  userId             String    @map("user_id") @db.Uuid
  topicId            String    @map("topic_id") @db.Text
  currentSubtopicId  String?   @map("current_subtopic_id") @db.Text
  status             Status
  progressPercentage Int       @map("progress_percentage")
  completedAt        DateTime? @map("completed_at")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic              Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  currentSubtopic    Topic?    @relation("CurrentSubtopic", fields: [currentSubtopicId], references: [id], onDelete: SetNull)

  @@unique([userId, topicId])
  @@map("user_progress")
}

model Question {
  id          String            @id @default(uuid()) @db.Uuid
  topicId     String            @map("topic_id") @db.Text
  title       String
  description String
  difficulty  Difficulty
  constraints String[]
  createdAt   DateTime          @default(now()) @map("created_at")
  topic       Topic             @relation(fields: [topicId], references: [id], onDelete: Cascade)
  examples    QuestionExample[]
  testCases   TestCase[]
  submissions UserSubmission[]

  @@map("questions")
}

model QuestionExample {
  id          String   @id @default(uuid()) @db.Uuid
  questionId  String   @map("question_id") @db.Uuid
  input       String
  output      String
  explanation String?
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_examples")
}

model TestCase {
  id             String   @id @default(uuid()) @db.Uuid
  questionId     String   @map("question_id") @db.Uuid
  input          String
  expectedOutput String   @map("expected_output")
  isHidden       Boolean  @default(false) @map("is_hidden")
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("test_cases")
}

model UserSubmission {
  id            String           @id @default(uuid()) @db.Uuid
  userId        String           @map("user_id") @db.Uuid
  questionId    String           @map("question_id") @db.Uuid
  code          String
  language      String
  status        SubmissionStatus
  executionTime Float?           @map("execution_time")
  memoryUsage   Float?           @map("memory_usage")
  createdAt     DateTime         @default(now()) @map("created_at")
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  question      Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("user_submissions")
}

enum Difficulty {
  beginner
  easy
  medium
  hard
}

enum Status {
  not_started
  in_progress
  complete
}

enum SubmissionStatus {
  pending
  running
  completed
  error
}

// Enums for chat message types
enum MessageSender {
  user
  assistant
}

enum MessageType {
  general
  question
  evaluation
  system
}

// Chat Session Model
model ChatSession {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  title     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user            User             @relation(fields: [userId], references: [id])
  messages        ChatMessage[]
  codeSubmissions CodeSubmission[]

  @@map("chat_sessions")
}

// Chat Message Model
model ChatMessage {
  id               String        @id @default(uuid()) @db.Uuid
  sessionId        String        @map("session_id") @db.Uuid
  sender           MessageSender
  messageType      MessageType   @map("message_type")
  message          String
  codeSubmissionId String?       @unique @map("code_submission_id") @db.Uuid
  createdAt        DateTime      @default(now()) @map("created_at")

  // Relations
  session        ChatSession      @relation(fields: [sessionId], references: [id])
  codeSubmission CodeSubmission?  @relation("EvaluationMessage", fields: [codeSubmissionId], references: [id])
  submissions    CodeSubmission[] @relation("QuestionMessage")

  @@map("chat_messages")
}

// Code Submission Model
model CodeSubmission {
  id            String   @id @default(uuid()) @db.Uuid
  sessionId     String   @map("session_id") @db.Uuid
  chatMessageId String   @map("chat_message_id") @db.Uuid
  language      String
  code          String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  session    ChatSession  @relation(fields: [sessionId], references: [id])
  question   ChatMessage  @relation("QuestionMessage", fields: [chatMessageId], references: [id])
  evaluation ChatMessage? @relation("EvaluationMessage")

  @@map("code_submissions")
}
